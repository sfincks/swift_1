import UIKit

// HW1

//1. Вывести в консоль все чётные числа от 0 до 100, включая 0.

//for i in 0...100 where i % 2 == 0{
//    print("",i)
//
//}

// 2. Создать две переменных: одна равна 7, другая 20.
// Если результат перемножения этих переменных больше 10,
//  то вывести в консоль первую переменную, в противном случае вывести вторую.

//var a: Int = 7
//var b: Int = 20

//a * b > 10 ? print(a) : print(b)

// 3. Создайте переменную “k”, равную 9. В диапазоне от 10 до 50, но только по
//  нечётным числам, если текущее число плюс “k” — чётное, то увеличьте “k” на 2,
//  в противном случае выведите в консоль “Next” и перейдите к следующей итерации.

//var k: Int = 9
//
//for i in 10...50 where i % 2 != 0 {
//    if (i + k) % 2 == 0 {
//        k += 2
//    }else {
//        print("Next")
//        continue
//    }
//}

// 4. Создайте переменную “k”, равную 9. В диапазоне от 10 до 50, но только
// по нечётным числам, если текущее число плюс “k” — чётное, то увеличьте “k” на 1,
//  в противном случае выведите в консоль “Next” прекратите выполнение цикла.

//var l: Int = 9


//for i in 10...50 where i % 2 != 0 {
//    if (i + l) % 2 == 0 {
//        l += 2
//    }else {
//        print("Next")
//        break
//    }
//}

// Hw2

//1.Написать функцию, которая на вход принимает число: сумма, которую пользователь хочет положить на вклад, следующий аргумент это годовой процент, третий аргумент это срок Функция возвращает сколько денег получит пользователь по итогу.

func deposit (sum: Double, interestPerc: Double, year:Double) -> Double{
    return  sum * (1+((interestPerc * year)/100))
}
//print(deposit(sum: 10000, interestPerc: 10, year: 2))

//2.Создать перечисление, которое содержит 3 вида пиццы и создать переменные с каждым видом пиццы.

enum Pizza: String{
    case clasic = "Margarita"
    case deliscios = "Pastrami"
    case pervertion = "PinaplePizza"
}

//3.Добавить возможность получения названия пиццы через rawValue
let bestSeller: Pizza = .clasic
let musthave: Pizza = .deliscios
let callPolice: Pizza = .pervertion
print(bestSeller.rawValue, musthave.rawValue, callPolice.rawValue)



