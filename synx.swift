// Синтаксис swift
// присваивание
let a: Int = 5 // let - константа
var b: Int = 5 // var - переменная 

// арифметика
+ - * / % // аримфетика
+= -= *= /= // a += 

// сравнение и диапазоны 
< > <= >= == // сравнение
!= || && // логические операторы
var a = ...7 // диапозон от 4 до 7, включая 7 и отрицательные значения 
var b = 4...7 // диапозон от 4 до 7, включая 4 и 7
var c = 4...<7 //диапозон от 4 до 7, включая 4 и исключая 7
var c = 4... //диапозон от 4 , включая 4 и далее
var c = ...<7 //диапозон  до 7, включая отрицательные и исключая 7

// Ветвления
if условие {
    действие
}
// пример
if b>10{
    b *= 2
}
// if - else if - else
if условие {
    действие
} else if условие {
    действие if условие выше false
} else {
    действие if все условия false
}
// тернанрный оператор // условие ? если правда : если ложь
let a = переменная > условие ? true : false
// пример
let a = count > 5 ? 10 : -10
// Сокращение тернарного оператора 
let a = 15
let b = a > 10 ? true : false
// можно сократить до
let b = a > 10

// switch - case
switch сравниваемое значение {
    case проверяемое значение : действие, если true
    default: если ни один case не прошёл
} //в case можно указывать несколько условий, а так несколько действий
// если нужно чтобы проверка case продолжилась, даже если case = true, то в действии нужно прописать fallthrough

// guard
guard условие else{
    действие, которое выполняется, если false
    return
}
действие, которое выполняется, если true

//for-in
for имя переменной из списка in список where дополнительное условие {
    действие
}

//while
while условие {
    действие
}

//repeat while
repeat {
    действие
} while условие

//операторы передачи управления
continue - если нужно перейти к следующей итерации
throw - используется при генерации ошибок
fallthrough - используется в switch case для перехода к следующему условию
break - прерывает цикл
return - выход из цикла


// Функции 
// Функция без возврата
func имя функции (){
    действие
}

// функция с возвратом
func имя(имя параметра1 : тип параметра1,имя параметра1 : тип параметра1) -> тип возвращаемого значения {
    действие
    return значение
}
 // с ярлыком аргумента
 func имя функции (ярлык аргумента:передаваемое значение){ // with value: Int .... можно указать _ место ярлыка
    действие
}
//inout используется для изменения внутренней переменной
func name(parameter name : inout Type) {
    body
}


// Перечисления - позволяют создать список для перечисления заданных значений
enum Name {
    case firstcase
    case secondcase
    case thirdcase
}

// перечисления с исходным знаечением 
enum Name : Type {
    case firstcase = firstparameter
    case secondcase = secondparameter
    case thirdcase = thirdparameter
}
// без указания значения string будет выводить имя case , а Int будет выводить порядковый номер case 

// чтобы найти исходное значение в перечисления нужно 
let name = enumName(rawValue: nameOfRawValue)
//пример
let latte = Coffee(rawValue: "latte")



//Опционалы - тип данных, который может иметь значение, а может и быть nil
var a: Int = 5
if a! >5{
    a! *= 2
}else {
    a = nil
}

//force unwraping - принудительно достаёт значение пепременной. использовать только если 100% ЕСТЬ значение

a! - firce unwraping

// implicity unwraping - механизм распаковки опционалов, когда известно, что значение будет
var a: Int! = 5

//nil coalescing - механизм, когда nil перменной можно задать другое значение

var name = name ?? value если опционал = nil

// optional bidding - механизм для распаковки опционала с проверкой на наличие значение используя if или guard 
var a: Int? = 5
if let name = optional {
    actioon if optional != nil && 
}

//guard let 
guard let name = optional else {
    return
}
action actioon if optional != nil && 